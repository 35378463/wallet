/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetBlock401Response,
  NftCollection,
  NftCollections,
  NftItems,
} from '../models';
import {
    GetBlock401ResponseFromJSON,
    GetBlock401ResponseToJSON,
    NftCollectionFromJSON,
    NftCollectionToJSON,
    NftCollectionsFromJSON,
    NftCollectionsToJSON,
    NftItemsFromJSON,
    NftItemsToJSON,
} from '../models';

export interface GetNftCollectionRequest {
    accountId: string;
}

export interface GetNftCollectionsRequest {
    limit?: number;
    offset?: number;
}

export interface GetNftItemsByAddressesRequest {
    accountIds: Array<string>;
}

/**
 * NFTApi - interface
 * 
 * @export
 * @interface NFTApiInterface
 */
export interface NFTApiInterface {
    /**
     * Get NFT collection by collection address
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTApiInterface
     */
    getNftCollectionRaw(requestParameters: GetNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftCollection>>;

    /**
     * Get NFT collection by collection address
     */
    getNftCollection(requestParameters: GetNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftCollection>;

    /**
     * Get NFT collections
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTApiInterface
     */
    getNftCollectionsRaw(requestParameters: GetNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftCollections>>;

    /**
     * Get NFT collections
     */
    getNftCollections(requestParameters: GetNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftCollections>;

    /**
     * Get NFT items by its address
     * @param {Array<string>} accountIds account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTApiInterface
     */
    getNftItemsByAddressesRaw(requestParameters: GetNftItemsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftItems>>;

    /**
     * Get NFT items by its address
     */
    getNftItemsByAddresses(requestParameters: GetNftItemsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftItems>;

}

/**
 * 
 */
export class NFTApi extends runtime.BaseAPI implements NFTApiInterface {

    /**
     * Get NFT collection by collection address
     */
    async getNftCollectionRaw(requestParameters: GetNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getNftCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/nfts/collections/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NftCollectionFromJSON(jsonValue));
    }

    /**
     * Get NFT collection by collection address
     */
    async getNftCollection(requestParameters: GetNftCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftCollection> {
        const response = await this.getNftCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get NFT collections
     */
    async getNftCollectionsRaw(requestParameters: GetNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftCollections>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/nfts/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NftCollectionsFromJSON(jsonValue));
    }

    /**
     * Get NFT collections
     */
    async getNftCollections(requestParameters: GetNftCollectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftCollections> {
        const response = await this.getNftCollectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get NFT items by its address
     */
    async getNftItemsByAddressesRaw(requestParameters: GetNftItemsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftItems>> {
        if (requestParameters.accountIds === null || requestParameters.accountIds === undefined) {
            throw new runtime.RequiredError('accountIds','Required parameter requestParameters.accountIds was null or undefined when calling getNftItemsByAddresses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/nfts/{account_ids}`.replace(`{${"account_ids"}}`, encodeURIComponent(String(requestParameters.accountIds))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NftItemsFromJSON(jsonValue));
    }

    /**
     * Get NFT items by its address
     */
    async getNftItemsByAddresses(requestParameters: GetNftItemsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftItems> {
        const response = await this.getNftItemsByAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
